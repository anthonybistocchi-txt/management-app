--------------------------------- UNIDADE DE MEDIDA --------------

A Lógica da Conversão
Peso: A menor unidade que você precisa para weight com 3 casas decimais (kg) são os gramas.

1.250 kg se torna 1250 gramas.

A conversão é multiplicar/dividir por 1000.

Dimensões: A menor unidade que você precisa para height, width e length com 2 casas decimais (cm) são os milímetros.

15.75 cm se torna 1575 milímetros.

A conversão é multiplicar/dividir por 100.

protected function weight(): Attribute
    {
        return Attribute::make(
            get: fn ($value) => $value / 1000, // Converte de gramas para kg
            set: fn ($value) => $value * 1000, // Converte de kg para gramas
        );
    }

    /**
     * Accessor/Mutator para o atributo 'height'.
     * Converte entre cm (para o dev) e milímetros (para o banco).
     */
    protected function height(): Attribute
    {
        return Attribute::make(
            get: fn ($value) => $value / 100, // Converte de mm para cm
            set: fn ($value) => $value * 100, // Converte de cm para mm
        );
    }


------------------------- PRECO -------------------------

A solução é brilhantemente simples: evite o problema completamente, não usando casas decimais no banco de dados.

Você trata a menor unidade da moeda (no nosso caso, o centavo) como sua unidade base.

Como funciona na prática:

Um produto custa R$ 99,90.

Você multiplica por 100: 99.90 * 100 = 9990.

Você armazena o número inteiro 9990 na coluna price_in_cents.

Exemplos:

R$ 1.250,75 → 125075

R$ 0,50 → 50

R$ 10,00 → 1000

protected function price(): Attribute
{
    return Attribute::make(
        // ACCESSOR: Como pegar o valor do banco e mostrar ao usuário
        // Converte de centavos (1990) para reais (19.90)
        get: fn ($value) => $value / 100,

        // MUTATOR: Como pegar o valor do usuário e salvar no banco
        // Converte de reais (19.90) para centavos (1990)
        set: fn ($value) => $value * 100,
    );
}